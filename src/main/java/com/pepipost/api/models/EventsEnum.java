/*
 * PepipostLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.pepipost.api.models;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

public enum EventsEnum {
    PROCESSED, //TODO: Write general description for this element
    SENT, //TODO: Write general description for this element
    OPEN, //TODO: Write general description for this element
    CLICK, //TODO: Write general description for this element
    UNSUBSCRIBE, //TODO: Write general description for this element
    BOUNCE, //TODO: Write general description for this element
    SOFTBOUNCE, //TODO: Write general description for this element
    SPAM, //TODO: Write general description for this element
    INVALID, //TODO: Write general description for this element
    DROPPED, //TODO: Write general description for this element
    HARDBOUNCE; //TODO: Write general description for this element

    private static TreeMap<String, EventsEnum> valueMap = new TreeMap<String, EventsEnum>();
    private String value;

    static {
        PROCESSED.value = "processed";
        SENT.value = "sent";
        OPEN.value = "open";
        CLICK.value = "click";
        UNSUBSCRIBE.value = "unsubscribe";
        BOUNCE.value = "bounce";
        SOFTBOUNCE.value = "softbounce";
        SPAM.value = "spam";
        INVALID.value = "invalid";
        DROPPED.value = "dropped";
        HARDBOUNCE.value = "hardbounce";

        valueMap.put("processed", PROCESSED);
        valueMap.put("sent", SENT);
        valueMap.put("open", OPEN);
        valueMap.put("click", CLICK);
        valueMap.put("unsubscribe", UNSUBSCRIBE);
        valueMap.put("bounce", BOUNCE);
        valueMap.put("softbounce", SOFTBOUNCE);
        valueMap.put("spam", SPAM);
        valueMap.put("invalid", INVALID);
        valueMap.put("dropped", DROPPED);
        valueMap.put("hardbounce", HARDBOUNCE);
    }

    /**
     * Returns the enum member associated with the given string value
     * @return The enum member against the given string value */
    @com.fasterxml.jackson.annotation.JsonCreator
    public static EventsEnum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member
     * @return The string value against enum member */
    @com.fasterxml.jackson.annotation.JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of EventsEnum values to list of string values
     * @param toConvert The list of EventsEnum values to convert
     * @return List of representative string values */
    public static List<String> toValue(List<EventsEnum> toConvert) {
        if(toConvert == null)
            return null;
        List<String> convertedValues = new ArrayList<String>();
        for (EventsEnum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 