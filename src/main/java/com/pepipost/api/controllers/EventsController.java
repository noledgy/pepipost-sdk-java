/*
 * PepipostLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.pepipost.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import org.joda.time.LocalDate;

import com.pepipost.api.*;
import com.pepipost.api.models.*;
import com.pepipost.api.exceptions.*;
import com.pepipost.api.http.client.HttpClient;
import com.pepipost.api.http.client.HttpContext;
import com.pepipost.api.http.request.HttpRequest;
import com.pepipost.api.http.response.HttpResponse;
import com.pepipost.api.http.response.HttpStringResponse;
import com.pepipost.api.http.client.APICallBack;
import com.pepipost.api.controllers.syncwrapper.APICallBackCatcher;

public class EventsController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static EventsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the EventsController class 
     */
    public static EventsController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new EventsController();
                }
            }
        }
        return instance;
    }

    /**
     * Lets you to retrieve the email transaction logs.
     * @param    startdate    Required parameter: The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.
     * @param    events    Optional parameter: Filter based on different email events. If not passed, all events will be fetched. Multiple comma separated events are allowed
     * @param    sort    Optional parameter: Sort based on email sent time
     * @param    enddate    Optional parameter: The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD
     * @param    offset    Optional parameter: The point in the list to begin retrieving results.
     * @param    limit    Optional parameter: The number of results to return.
     * @param    subject    Optional parameter: Filter logs based on subject
     * @param    xapiheader    Optional parameter: Filter logs based on recipient's email
     * @param    fromaddress    Optional parameter: Filter logs based on fromaddress
     * @param    email    Optional parameter: Filter logs based on recipient's email
     * @return    Returns the Object response from the API call 
     */
    public Object getEventsGET(
                final LocalDate startdate,
                final EventsEnum events,
                final SortEnum sort,
                final LocalDate enddate,
                final Integer offset,
                final Integer limit,
                final String subject,
                final String xapiheader,
                final String fromaddress,
                final String email
    ) throws Throwable {

        HttpRequest _request = _buildGetEventsGETRequest(startdate, events, sort, enddate, offset, limit, subject, xapiheader, fromaddress, email);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetEventsGETResponse(_context);
    }

    /**
     * Lets you to retrieve the email transaction logs.
     * @param    startdate    Required parameter: The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.
     * @param    events    Optional parameter: Filter based on different email events. If not passed, all events will be fetched. Multiple comma separated events are allowed
     * @param    sort    Optional parameter: Sort based on email sent time
     * @param    enddate    Optional parameter: The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD
     * @param    offset    Optional parameter: The point in the list to begin retrieving results.
     * @param    limit    Optional parameter: The number of results to return.
     * @param    subject    Optional parameter: Filter logs based on subject
     * @param    xapiheader    Optional parameter: Filter logs based on recipient's email
     * @param    fromaddress    Optional parameter: Filter logs based on fromaddress
     * @param    email    Optional parameter: Filter logs based on recipient's email
     */
    public void getEventsGETAsync(
                final LocalDate startdate,
                final EventsEnum events,
                final SortEnum sort,
                final LocalDate enddate,
                final Integer offset,
                final Integer limit,
                final String subject,
                final String xapiheader,
                final String fromaddress,
                final String email,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetEventsGETRequest(startdate, events, sort, enddate, offset, limit, subject, xapiheader, fromaddress, email);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            Object returnValue = _handleGetEventsGETResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getEventsGET
     */
    private HttpRequest _buildGetEventsGETRequest(
                final LocalDate startdate,
                final EventsEnum events,
                final SortEnum sort,
                final LocalDate enddate,
                final Integer offset,
                final Integer limit,
                final String subject,
                final String xapiheader,
                final String fromaddress,
                final String email) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/events");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("startdate", DateTimeHelper.toSimpleDate(startdate));
        if (events != null) {
            _queryParameters.put("events", (events != null) ? events.value() : null);
        }
        if (sort != null) {
            _queryParameters.put("sort", (sort != null) ? sort.value() : null);
        }
        if (enddate != null) {
            _queryParameters.put("enddate", DateTimeHelper.toSimpleDate(enddate));
        }
        if (offset != null) {
            _queryParameters.put("offset", (offset != null) ? offset : 0);
        }
        if (limit != null) {
            _queryParameters.put("limit", (limit != null) ? limit : 10);
        }
        if (subject != null) {
            _queryParameters.put("subject", subject);
        }
        if (xapiheader != null) {
            _queryParameters.put("xapiheader", xapiheader);
        }
        if (fromaddress != null) {
            _queryParameters.put("fromaddress", fromaddress);
        }
        if (email != null) {
            _queryParameters.put("email", email);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("api_key", Configuration.apiKey);
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getEventsGET
     * @return An object of type Object
     */
    private Object _handleGetEventsGETResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new APIException("API Response", _context);
        }
        if (_responseCode == 401) {
            throw new APIException("API Response", _context);
        }
        if (_responseCode == 403) {
            throw new APIException("API Response", _context);
        }
        if (_responseCode == 405) {
            throw new APIException("Invalid input", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        Object _result = _responseBody;

        return _result;
    }

}
